<?php
/**
 * core/neechy/config.php
 *
 * Neechy config module.
 *
 * There are three possible config files:
 *
 * 1. Core config at CORE_PATH: this is packaged with repository and should always be present.
 * 2. Test config at TEST_PATH: this must be manually generated by developer after cloning repo.
 * 3. App config at APP_PATH: this is generated by the console InstallHandler script.
 *
 * There is also the STUB_PATH which is used by the install script to generate the app config file.
 *
 */
require_once('../core/neechy/constants.php');
require_once('../core/neechy/path.php');
require_once('../core/neechy/errors.php');


class NeechyConfigError extends NeechyError {}


class NeechyConfig {
    #
    # Constants
    #
    const CORE_PATH = 'core/config/core.conf.php';
    const STUB_PATH = 'core/handlers/install/php/stub.config.php';
    const TEST_PATH = 'test/test.conf.php';
    const APP_PATH = 'config/app.conf.php';

    #
    # Properties
    #
    static private $environment = null;
    static private $settings = array();

    public $path = '';
    private $core_loaded = false;
    private $test_loaded = false;
    private $app_loaded = false;
    private $_settings = array();

    #
    # Public Static Interface
    #
    static public function init() {
        # A bit of automagic here infers environment based on presence of config files.
        # This is to help developers move between dev and test environments as
        # frictionlessly as possible.
        # Core file should always be loaded.
        $core_settings = self::load_core_config_file();

        # If app file present, load file and assume production environment.
        if ( self::app_config_file_present() ) {
            self::$environment = 'app';
            $app_settings = self::load_app_config_file();
        }

        # If app file missing, load test file and assume test environment.
        elseif ( self::test_config_file_present() ) {
            self::$environment = 'test';
            $app_settings = self::load_test_config_file();
        }

        # Default: core
        else {
            self::$environment = 'core';
        }

        self::$settings = array_merge($core_settings, $app_settings);
        $self = new NeechyConfig();
        return $self;
    }

    static public function environment() {
        return self::$environment;
    }


    #
    # Instance Constructor
    #
    static public function load_app_config($path=null) {
        $app_config = new NeechyConfig();
        $app_config->path = self::app_config_path();
        $app_config->settings = self::load_app_config_file($path);
        return $app_config;
    }

    static public function get($setting, $default=null) {
        if ( isset(self::$settings[$setting]) ) {
            return self::$settings[$setting];
        }
        else {
            return $default;
        }
    }

    static public function app_config_path() {
        return NeechyPath::join(NEECHY_ROOT, self::APP_PATH);
    }

    #
    # Protected Static Methods
    #
    static protected function load_core_config_file($path=null) {
        # This file should always be present.
        self::assert_core_config_present();

        $core_config_path = NeechyPath::join(NEECHY_ROOT, self::CORE_PATH);
        require($core_config_path);

        # Global variable assigned in core config file.
        return $neechy_core_config;
    }

    static protected function assert_core_config_present() {
        $core_config_path = NeechyPath::join(NEECHY_ROOT, self::CORE_PATH);
        if ( ! file_exists($core_config_path) ) {
            throw new NeechyConfigError(sprintf('Core config file [%s] missing',
                                                $core_config_path));
        }
    }

    static protected function app_config_file_present() {
        $app_config_path = NeechyPath::join(NEECHY_ROOT, self::APP_PATH);
        return file_exists($app_config_path);
    }

    static private function load_app_config_file() {
        $app_config_path = NeechyPath::join(NEECHY_ROOT, self::APP_PATH);
        require($app_config_path);

        # Global variable assigned in app config file.
        return $neechy_app_config;
    }

    static protected function test_config_file_present() {
        $test_config_path = NeechyPath::join(NEECHY_ROOT, self::TEST_PATH);
        return file_exists($test_config_path);
    }

    static private function load_test_config_file() {
        $test_config_path = NeechyPath::join(NEECHY_ROOT, self::TEST_PATH);
        require($test_config_path);

        # Global variable assigned in test config file.
        return $neechy_test_config;
    }

    static private function install_app_config_file($sleep=2) {
        $app_config_dir = dirname(self::app_config_path());
        if ( ! file_exists($app_config_dir) ) {
            mkdir($app_config_dir);
        }

        $app_config_path = self::app_config_path();
        $warning = sprintf("\n[WARNING] Creating user config file: %s\n\n", $app_config_path);
        echo $warning;

        $stub_config_path = NeechyPath::join(NEECHY_ROOT, self::STUB_PATH);
        copy($stub_config_path, $app_config_path);
    }

    #
    # Instance Methods
    #
    public function update_setting($setting, $value) {
        $this->_settings[$setting] = $value;
    }

    public function save() {
        $format = <<<HEREPHP
<?php
/**
 * Neechy App Configuration File
 *
 * This file was generated by the InstallHandler installer on %s
 *
 */

%s = array(
    %s
);
HEREPHP;

        $config_lines = array();
        foreach ( $this->settings as $setting => $value ) {
            $config_lines[] = sprintf("'%s' => '%s',",
                str_replace("'", "/'", $setting),
                str_replace("'", "/'", $value)
            );
        }

        sort($config_lines);

        $content = sprintf($format,
            date('r'),
            '$neechy_config',
            implode("\n    ", $config_lines)
        );

        # Write file
        $file = @fopen($this->path, "w");
        fwrite($file, $content);
        fclose($file);
    }

    public function reload() {
        NeechyDatabase::disconnect_from_db();
        NeechyConfig::init($this->path);
    }
}
